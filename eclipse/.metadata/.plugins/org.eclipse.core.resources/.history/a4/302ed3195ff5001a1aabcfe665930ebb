
package de.devjava.playshot.addon.listener.labymod;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.fusesource.jansi.Ansi.Color;
import org.lwjgl.opengl.GL11;

import de.devjava.playshot.addon.LabyAddon;
import de.devjava.playshot.addon.listener.custom.RenderEntityEvent;
import de.devjava.playshot.addon.objects.modules.Module;
import de.devjava.playshot.addon.objects.register.LabyModEvent;
import de.devjava.playshot.addon.objects.register.Listener;
import de.devjava.playshot.addon.render.RenderLaser;
import de.devjava.playshot.addon.render.RenderUtils;
import de.devjava.playshot.addon.utils.EntityLaser;
import de.devjava.playshot.addon.utils.EnumDyeColor;
import de.devjava.playshot.addon.utils.Server;
import net.labymod.main.LabyMod;
import net.minecraft.client.Minecraft;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.entity.RendererLivingEntity;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.Vec3;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.PlayerEvent;

public class Listener_RenderEntityEvent implements Listener
{
	@LabyModEvent
	public void onRenderEntityEvent(RenderEntityEvent event)
	{
		shootYellowjacketLaser((EntityPlayer) event.getEntity(), false);
		System.out.println("dsdst");
		
		if(!LabyAddon.getInstance().getLabyManager().getLabyClient().isConnected())
			return;
		
		if(event.getEntity().getName().equals("DevJava") || event.getEntity().getName().equals("JavaVirus"))
			if(LabyAddon.getInstance().getLabyManager().getLabyClient().isConnected() && LabyAddon.getInstance().getLabyManager().getLabyClient().getServer() != Server.LAZERTAG && !event.getEntity().isSneaking())
				new RenderUtils().renderName(EnumChatFormatting.WHITE + "LabyAddon " + EnumChatFormatting.DARK_GRAY + "| " + EnumChatFormatting.AQUA + "Developer", event.getEntity(), event.getarg1(), event.getarg2(), event.getarg3());
			else if(!LabyAddon.getInstance().getLabyManager().getLabyClient().isConnected() && !event.getEntity().isSneaking())
				new RenderUtils().renderName(EnumChatFormatting.WHITE + "PlayShot " + EnumChatFormatting.DARK_GRAY + "| " + EnumChatFormatting.AQUA + "Developer", event.getEntity(), event.getarg1(), event.getarg2(), event.getarg3());

		if(event.getEntity().getName().equals("Baum_Kind"))
			if(LabyAddon.getInstance().getLabyManager().getLabyClient().isConnected() && LabyAddon.getInstance().getLabyManager().getLabyClient().getServer() != Server.LAZERTAG && !event.getEntity().isSneaking())
				new RenderUtils().renderName(EnumChatFormatting.WHITE + "PlayShot " + EnumChatFormatting.DARK_GRAY + "| " + EnumChatFormatting.DARK_RED + "Inhaber", event.getEntity(), event.getarg1(), event.getarg2(), event.getarg3());

		if(!LabyAddon.getInstance().getLabyManager().getLabyClient().isConnected())
			return;

		for(Module module : LabyAddon.getInstance().getModuleManager().getModules())
			if(module.isEnabled())
				module.onRenderEntityEvent(event);
		
	}
	
	  
	  public static void shootYellowjacketLaser(EntityPlayer player, boolean left) {
		  System.out.println();
	    Vec3 user = player.getPositionVector().addVector(0.0D, player.eyeHeight, 0.0D);
	    if (left) {
	      Vec3 vLeft = new Vec3((player.width * 2.5F), 0.0D, (player.width / 1.8F));
	      vLeft = vLeft.rotateYaw(-player.renderYawOffset * 3.1415927F / 180.0F);
	      vLeft = vLeft.addVector(-player.motionX * 0.2D, -player.motionY * 0.2D, -player.motionZ * 0.2D);
	      Vec3 v = user;
	      v = v.add(vLeft);
	      player.worldObj.spawnEntityInWorld((Entity)new EntityLaser(player.worldObj, (EntityLivingBase)player, v.xCoord, v.yCoord, v.zCoord));
	      player.worldObj.playSoundAtEntity((Entity)player, "AntMan:laser1", 1.0F, 1.0F);
	    } else {
	      Vec3 vRight = new Vec3((-player.width * 2.5F), 0.0D, (player.width / 1.8F));
	      vRight = vRight.rotateYaw(-player.renderYawOffset * 3.1415927F / 180.0F);
	      vRight = vRight.addVector(-player.motionX * 0.2D, -player.motionY * 0.2D, -player.motionZ * 0.2D);
	      Vec3 v2 = user;
	      v2 = v2.add(vRight);
	      player.worldObj.spawnEntityInWorld((Entity)new EntityLaser(player.worldObj, (EntityLivingBase)player, v2.xCoord, v2.yCoord, v2.zCoord));
	      player.worldObj.playSoundAtEntity((Entity)player, "AntMan:laser2", 1.0F, 1.0F);
	    } 
	  }
	
	@SubscribeEvent
    public void onPlayerLogin(PlayerEvent.PlayerLoggedInEvent event)
    {
      
		
	
    }
	
	public static Method setSizeMethod;
	public static final String setSizeObf = "func_70105_a";
	public static final String setSizeDeobf = "setSize";
	public static boolean obfuscation;

    public static void detectObfuscation()
    {
        obfuscation = true;
        try
        {
            Field[] fields = Class.forName("net.minecraft.world.World").getDeclaredFields();
            for(Field f : fields)
            {
            	f.setAccessible(true);
            	if(f.getName().equalsIgnoreCase("loadedEntityList"))
            	{
            		obfuscation = false;
            		return;
            	}
            }
        }
        catch (Exception e)
        {
        }
    }
	
	public static void forceSetSize(Entity ent, float width, float height)
	{
		detectObfuscation();
		
		if(setSizeMethod == null)
		{
			try
			{
				Method m = EntityLivingBase.class.getDeclaredMethod(Listener_RenderEntityEvent.obfuscation ? Listener_RenderEntityEvent.setSizeObf : Listener_RenderEntityEvent.setSizeDeobf, float.class, float.class);
				setSizeMethod = m;
			}
			catch(NoSuchMethodException e)
			{
				ent.width = width;
				ent.height = height;
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		if(setSizeMethod != null)
		{
			try
			{
				setSizeMethod.setAccessible(true);
				setSizeMethod.invoke(ent, width, height);				
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
	}
	
}
